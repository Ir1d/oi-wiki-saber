(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{81:function(e,r,p){"use strict";p.r(r);var n=p(0),t=function(e){var r,p=(r=void 0,{attributes:{slug:"intro/common-mistakes",layout:"post",permalink:"/intro/common-mistakes",createdAt:new Date(1561437700203),updatedAt:new Date(1561437700203),type:"page",assets:{}},internal:r,contentType:"markdown",content:r,markdownHeadings:[{text:"会引起 Compile Error 的错误",slug:"会引起-compile-error-的错误",level:2},{text:"不会引起 Compile Error 但会引发 Warning 的错误",slug:"不会引起-compile-error-但会引发-warning-的错误",level:2},{text:"既不会引起 Compile Error 也不会引发 Warning 的错误",slug:"既不会引起-compile-error-也不会引发-warning-的错误",level:2}],excerpt:"<p>本页面主要分享一下在竞赛中经常/很多人会出现的错误。</p>\n"}),n=e.options.beforeCreate||[];e.options.beforeCreate=[function(){this.$page=p}].concat(n);["layout","transition"].forEach(function(r){var n=e.options.PageComponent;n&&(e.options[r]=n[r]),void 0===e.options[r]&&(e.options[r]=p.attributes[r])}),e.options.name="page-wrapper-"+p.attributes.slug.replace(/[^0-9a-z\-]/i,"-")},a=Object(n.a)({},function(){var e=this,r=e.$createElement,p=e._self._c||r;return p("layout-manager",[p("p",[e._v("本页面主要分享一下在竞赛中经常/很多人会出现的错误。")]),e._v(" "),p("h2",{attrs:{id:"会引起-compile-error-的错误"}},[e._v("会引起 Compile Error 的错误")]),e._v(" "),p("p",[e._v("由于这类错误过于简单,"),p("s",[e._v("相信是个正常人都会修")]),e._v(",故略写.")]),e._v(" "),p("ul",[p("li",[p("p",[p("code",{pre:!0},[e._v("int main()")]),e._v(" 写为 "),p("code",{pre:!0},[e._v("int mian()")]),e._v(" 。")])]),e._v(" "),p("li",[p("p",[e._v("写完 "),p("code",{pre:!0},[e._v("struct")]),e._v(" 或 "),p("code",{pre:!0},[e._v("class")]),e._v(" 忘记写分号。")])])]),e._v(" "),p("h2",{attrs:{id:"不会引起-compile-error-但会引发-warning-的错误"}},[e._v("不会引起 Compile Error 但会引发 Warning 的错误")]),e._v(" "),p("p",[e._v("这类错误较难发现，但会在使用 "),p("code",{pre:!0},[e._v("-W{warningtype}")]),e._v(" 参数编译时被编译器指出，所以要多学会使用 "),p("code",{pre:!0},[e._v("-W{warningtype}")]),e._v(" 参数，常见的有 "),p("code",{pre:!0},[e._v("-Wall")]),e._v("，"),p("code",{pre:!0},[e._v("-Wextra")]),e._v("，"),p("code",{pre:!0},[e._v("-Wshadow")]),e._v(" 等。")]),e._v(" "),p("ul",[p("li",[p("p",[e._v("由于运算符优先级产生的错误。")]),e._v(" "),p("ul",[p("li",[p("code",{pre:!0},[e._v("1 << 1 + 1")]),e._v(" : 1 左移了 2，即该表达式返回的值是 "),p("code",{pre:!0},[e._v("4")]),e._v(" 。")])])]),e._v(" "),p("li",[p("p",[e._v("不正确地使用 "),p("code",{pre:!0},[e._v("static")]),e._v(" 修饰符。")])]),e._v(" "),p("li",[p("p",[p("code",{pre:!0},[e._v("-1 >> 1 == 1")]),e._v(" 。")])]),e._v(" "),p("li",[p("p",[e._v("赋值运算符和 "),p("code",{pre:!0},[e._v("==")]),e._v(" 不分。")]),e._v(" "),p("ul",[p("li",[e._v("示例："),p("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"cpp"}},[p("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[p("code",{pre:!0,attrs:{class:"language-cpp"}},[e._v('if (n = 1) puts("Yes");\nelse puts("No");')])])]),e._v("无论 $n$ 的值之前为多少，输出肯定是 "),p("code",{pre:!0},[e._v("Yes")]),e._v("。")])])]),e._v(" "),p("li",[p("p",[e._v("使用 "),p("code",{pre:!0},[e._v("scanf")]),e._v(" 读入的时候没加取地址符 "),p("code",{pre:!0},[e._v("&")]),e._v("。")])]),e._v(" "),p("li",[p("p",[e._v("没有考虑数组下标出现负数的情况。")])])]),e._v(" "),p("h2",{attrs:{id:"既不会引起-compile-error-也不会引发-warning-的错误"}},[e._v("既不会引起 Compile Error 也不会引发 Warning 的错误")]),e._v(" "),p("p",[e._v("这类错误无法被编译器发现,所以在调试时只能依靠你自己.")]),e._v(" "),p("ul",[p("li",[p("p",[e._v("无向图边表未开 2 倍。")])]),e._v(" "),p("li",[p("p",[e._v("线段树未开 4 倍空间。")])]),e._v(" "),p("li",[p("p",[e._v("多组数据未清空数组。")])]),e._v(" "),p("li",[p("p",[e._v("分治未判边界导致死递归。")])]),e._v(" "),p("li",[p("p",[e._v("读入优化未判断负数。")])]),e._v(" "),p("li",[p("p",[e._v("存图下标从 0 开始输入节点未 -1。")])]),e._v(" "),p("li",[p("p",[e._v("BFS 时不标记某个状态是否已访问过。")])]),e._v(" "),p("li",[p("p",[e._v("大/小于号打错或打反。")])]),e._v(" "),p("li",[p("p",[e._v("在执行 "),p("code",{pre:!0},[e._v("ios::sync_with_stdio(false);")]),e._v(" 后混用两种 IO，导致输入/输出错乱。")]),e._v(" "),p("ul",[p("li",[e._v("可以参考这个例子。")])]),e._v(" "),p("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"cpp"}},[p("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[p("code",{pre:!0,attrs:{class:"language-cpp"}},[e._v('//这个例子将说明，关闭与 stdio 的同步后，混用两种 IO 的后果\n//建议单步运行来观察效果\n#include <cstdio>\n#include <iostream>\nint main() {\n    std::ios::sync_with_stdio(false);\n    //关闭同步后，cin/cout 将使用独立缓冲区，而不是将输出同步至 scanf/printf 的缓冲区，从而减少 IO 耗时\n    std::cout << "a\\n";\n    //cout 下，使用\'\\n\'换行时，内容会被缓冲而不会被立刻输出，应该使用 endl 来换行并立刻刷新缓冲区\n    printf("b\\n");\n    //printf 的 \'\\n\' 会刷新 printf 的缓冲区，导致输出错位\n    std::cout << "c\\n";\n    return 0;//程序结束时，cout 的缓冲区才会被输出\n}')])])])]),e._v(" "),p("li",[p("p",[e._v("由于宏的展开，且未加括号导致的错误：")]),e._v(" "),p("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"cpp"}},[p("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[p("code",{pre:!0,attrs:{class:"language-cpp"}},[e._v('#define square(x) x * x\nprintf("%d", square(2 + 2));')])])]),p("p",[e._v("该宏返回的值并非 $4^2 = 16$ 而是 $2+2\\times 2+2 = 8$ 。")])]),e._v(" "),p("li",[p("p",[e._v("使用宏展开编写 min/max\n这种做法虽然算不上是「错误」，但是这里还是要拎出来说一下。\n常见的写法是这样的：")]),e._v(" "),p("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"cpp"}},[p("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[p("code",{pre:!0,attrs:{class:"language-cpp"}},[e._v("#define Min(x, y) (x < y ? x : y)\n#define Max(x, y) (x > y ? x : y)")])])]),p("p",[e._v("这样写虽然在正确性上没有问题，但是如果你直接对函数的返回值取 max，如 "),p("code",{pre:!0},[e._v("a = Max(func1(), func2())")]),e._v("，而这个函数的运行时间较长，则会大大影响程序的性能，因为宏展开后是 "),p("code",{pre:!0},[e._v("a = func1() > func2() ? func1() : func2()")]),e._v(" 的形式，调用了三次函数，比正常的 max 函数多调用了一次。\n这种错误在初学者写线段树时尤为多见。")])]),e._v(" "),p("li",[p("p",[e._v("文件操作有可能会发生的错误。")]),e._v(" "),p("ul",[p("li",[e._v("对拍时未清除文件指针即 "),p("code",{pre:!0},[e._v("fclose(fp)")]),e._v(" 就又令 "),p("code",{pre:!0},[e._v("fp = fopen()")]),e._v(" , 这会使得进程出现大量的文件野指针。")]),e._v(" "),p("li",[p("code",{pre:!0},[e._v("freopen()")]),e._v(" 中的文件名未加 "),p("code",{pre:!0},[e._v(".in")]),e._v(" / "),p("code",{pre:!0},[e._v(".out")]),e._v(" 。")])])])])])},[],!1,null,null,null);"function"==typeof t&&t(a);r.default=a.exports}}]);