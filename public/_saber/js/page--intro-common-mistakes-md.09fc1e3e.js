(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{81:function(t,s,a){"use strict";a.r(s);var n=a(0),e=function(t){var s,a=(s=void 0,{attributes:{slug:"intro/common-mistakes",layout:"post",permalink:"/intro/common-mistakes",createdAt:new Date(1561460923084),updatedAt:new Date(1561460923084),type:"page",assets:{}},internal:s,contentType:"markdown",content:s,markdownHeadings:[{text:"会引起 Compile Error 的错误",slug:"会引起-compile-error-的错误",level:2},{text:"不会引起 Compile Error 但会引发 Warning 的错误",slug:"不会引起-compile-error-但会引发-warning-的错误",level:2},{text:"既不会引起 Compile Error 也不会引发 Warning 的错误",slug:"既不会引起-compile-error-也不会引发-warning-的错误",level:2}],excerpt:"<p>本页面主要分享一下在竞赛中经常/很多人会出现的错误。</p>\n"}),n=t.options.beforeCreate||[];t.options.beforeCreate=[function(){this.$page=a}].concat(n);["layout","transition"].forEach(function(s){var n=t.options.PageComponent;n&&(t.options[s]=n[s]),void 0===t.options[s]&&(t.options[s]=a.attributes[s])}),t.options.name="page-wrapper-"+a.attributes.slug.replace(/[^0-9a-z\-]/i,"-")},r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("layout-manager",[a("p",[t._v("本页面主要分享一下在竞赛中经常/很多人会出现的错误。")]),t._v(" "),a("h2",{attrs:{id:"会引起-compile-error-的错误"}},[a("saber-link",{staticClass:"header-anchor",attrs:{to:"#会引起-compile-error-的错误","aria-hidden":"true"}},[t._v("#")]),t._v(" 会引起 Compile Error 的错误")],1),t._v(" "),a("p",[t._v("由于这类错误过于简单,"),a("s",[t._v("相信是个正常人都会修")]),t._v(",故略写.")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",{pre:!0},[t._v("int main()")]),t._v(" 写为 "),a("code",{pre:!0},[t._v("int mian()")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[t._v("写完 "),a("code",{pre:!0},[t._v("struct")]),t._v(" 或 "),a("code",{pre:!0},[t._v("class")]),t._v(" 忘记写分号。")])])]),t._v(" "),a("h2",{attrs:{id:"不会引起-compile-error-但会引发-warning-的错误"}},[a("saber-link",{staticClass:"header-anchor",attrs:{to:"#不会引起-compile-error-但会引发-warning-的错误","aria-hidden":"true"}},[t._v("#")]),t._v(" 不会引起 Compile Error 但会引发 Warning 的错误")],1),t._v(" "),a("p",[t._v("这类错误较难发现，但会在使用 "),a("code",{pre:!0},[t._v("-W{warningtype}")]),t._v(" 参数编译时被编译器指出，所以要多学会使用 "),a("code",{pre:!0},[t._v("-W{warningtype}")]),t._v(" 参数，常见的有 "),a("code",{pre:!0},[t._v("-Wall")]),t._v("，"),a("code",{pre:!0},[t._v("-Wextra")]),t._v("，"),a("code",{pre:!0},[t._v("-Wshadow")]),t._v(" 等。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("由于运算符优先级产生的错误。")]),t._v(" "),a("ul",[a("li",[a("code",{pre:!0},[t._v("1 << 1 + 1")]),t._v(" : 1 左移了 2，即该表达式返回的值是 "),a("code",{pre:!0},[t._v("4")]),t._v(" 。")])])]),t._v(" "),a("li",[a("p",[t._v("不正确地使用 "),a("code",{pre:!0},[t._v("static")]),t._v(" 修饰符。")])]),t._v(" "),a("li",[a("p",[a("code",{pre:!0},[t._v("-1 >> 1 == 1")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[t._v("赋值运算符和 "),a("code",{pre:!0},[t._v("==")]),t._v(" 不分。")]),t._v(" "),a("ul",[a("li",[t._v("示例："),a("div",{pre:!0,attrs:{class:"saber-highlight has-line-numbers","data-lang":"cpp"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[a("code",{pre:!0,attrs:{class:"language-cpp"}},[a("span",{pre:!0,attrs:{"aria-hidden":"true",class:"saber-highlight-line-numbers"}},[a("span"),a("span")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),t._v("无论 $n$ 的值之前为多少，输出肯定是 "),a("code",{pre:!0},[t._v("Yes")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[t._v("使用 "),a("code",{pre:!0},[t._v("scanf")]),t._v(" 读入的时候没加取地址符 "),a("code",{pre:!0},[t._v("&")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("没有考虑数组下标出现负数的情况。")])])]),t._v(" "),a("h2",{attrs:{id:"既不会引起-compile-error-也不会引发-warning-的错误"}},[a("saber-link",{staticClass:"header-anchor",attrs:{to:"#既不会引起-compile-error-也不会引发-warning-的错误","aria-hidden":"true"}},[t._v("#")]),t._v(" 既不会引起 Compile Error 也不会引发 Warning 的错误")],1),t._v(" "),a("p",[t._v("这类错误无法被编译器发现,所以在调试时只能依靠你自己.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无向图边表未开 2 倍。")])]),t._v(" "),a("li",[a("p",[t._v("线段树未开 4 倍空间。")])]),t._v(" "),a("li",[a("p",[t._v("多组数据未清空数组。")])]),t._v(" "),a("li",[a("p",[t._v("分治未判边界导致死递归。")])]),t._v(" "),a("li",[a("p",[t._v("读入优化未判断负数。")])]),t._v(" "),a("li",[a("p",[t._v("存图下标从 0 开始输入节点未 -1。")])]),t._v(" "),a("li",[a("p",[t._v("BFS 时不标记某个状态是否已访问过。")])]),t._v(" "),a("li",[a("p",[t._v("大/小于号打错或打反。")])]),t._v(" "),a("li",[a("p",[t._v("在执行 "),a("code",{pre:!0},[t._v("ios::sync_with_stdio(false);")]),t._v(" 后混用两种 IO，导致输入/输出错乱。")]),t._v(" "),a("ul",[a("li",[t._v("可以参考这个例子。")])]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight has-line-numbers","data-lang":"cpp"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[a("code",{pre:!0,attrs:{class:"language-cpp"}},[a("span",{pre:!0,attrs:{"aria-hidden":"true",class:"saber-highlight-line-numbers"}},[a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span"),a("span")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个例子将说明，关闭与 stdio 的同步后，混用两种 IO 的后果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//建议单步运行来观察效果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ios"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync_with_stdio")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关闭同步后，cin/cout 将使用独立缓冲区，而不是将输出同步至 scanf/printf 的缓冲区，从而减少 IO 耗时")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cout 下，使用'\\n'换行时，内容会被缓冲而不会被立刻输出，应该使用 endl 来换行并立刻刷新缓冲区")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//printf 的 '\\n' 会刷新 printf 的缓冲区，导致输出错位")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//程序结束时，cout 的缓冲区才会被输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])])]),t._v(" "),a("li",[a("p",[t._v("由于宏的展开，且未加括号导致的错误：")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight has-line-numbers","data-lang":"cpp"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-cpp"}},[a("code",{pre:!0,attrs:{class:"language-cpp"}},[a("span",{pre:!0,attrs:{"aria-hidden":"true",class:"saber-highlight-line-numbers"}},[a("span"),a("span")]),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" square(x) x * x")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),a("p",[t._v("该宏返回的值并非 $4^2 = 16$ 而是 $2+2\\times 2+2 = 8$ 。")])]),t._v(" "),a("li",[a("p",[t._v("使用宏展开编写 min/max\n这种做法虽然算不上是「错误」，但是这里还是要拎出来说一下。\n常见的写法是这样的：\n"),a("code",{pre:!0},[t._v("cpp #define Min(x, y) (x < y ? x : y) #define Max(x, y) (x > y ? x : y)")]),t._v("\n这样写虽然在正确性上没有问题，但是如果你直接对函数的返回值取 max，如 "),a("code",{pre:!0},[t._v("a = Max(func1(), func2())")]),t._v("，而这个函数的运行时间较长，则会大大影响程序的性能，因为宏展开后是 "),a("code",{pre:!0},[t._v("a = func1() > func2() ? func1() : func2()")]),t._v(" 的形式，调用了三次函数，比正常的 max 函数多调用了一次。\n这种错误在初学者写线段树时尤为多见。")])]),t._v(" "),a("li",[a("p",[t._v("文件操作有可能会发生的错误。")]),t._v(" "),a("ul",[a("li",[t._v("对拍时未清除文件指针即 "),a("code",{pre:!0},[t._v("fclose(fp)")]),t._v(" 就又令 "),a("code",{pre:!0},[t._v("fp = fopen()")]),t._v(" , 这会使得进程出现大量的文件野指针。")]),t._v(" "),a("li",[a("code",{pre:!0},[t._v("freopen()")]),t._v(" 中的文件名未加 "),a("code",{pre:!0},[t._v(".in")]),t._v(" / "),a("code",{pre:!0},[t._v(".out")]),t._v(" 。")])])])])])},[],!1,null,null,null);"function"==typeof e&&e(r);s.default=r.exports}}]);